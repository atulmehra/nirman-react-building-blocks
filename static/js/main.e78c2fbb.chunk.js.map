{"version":3,"sources":["theme_default.js","nirman-react-login-building-blocks/basic-material-ui-login-page.js","App.js","serviceWorker.js","index.js"],"names":["themeDefault","getMuiTheme","palette","appBar","height","color","blue600","drawer","width","grey900","raisedButton","primaryColor","BasicMaterialUILoginPage","params","styles","loginContainer","minWidth","maxWidth","position","top","left","right","margin","paper","padding","overflow","buttonsDiv","textAlign","flatButton","grey500","checkRemember","style","float","paddingTop","labelStyle","iconStyle","borderColor","fill","loginBtn","btn","background","white","borderRadius","fontSize","btnFacebook","btnGoogle","btnSpan","marginLeft","muiTheme","ThemeDefault","hintText","floatingLabelText","fullWidth","type","label","primary","href","icon","App","Fragment","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qWAkBeA,E,MAfMC,GAAY,CAC/BC,QAAS,GACTC,OAAQ,CACNC,OAAQ,GACRC,MAAOC,WAETC,OAAQ,CACNC,MAAO,IACPH,MAAOI,WAETC,aAAc,CACZC,aAAcL,aC+HHM,EAhIkB,SAACC,GAChC,IAAMC,EAAS,CACbC,eAAgB,CACdC,SAAU,IACVC,SAAU,IACVb,OAAQ,OACRc,SAAU,WACVC,IAAK,MACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,QAEVC,MAAO,CACLC,QAAS,GACTC,SAAU,QAEZC,WAAY,CACVC,UAAW,SACXH,QAAS,IAEXI,WAAY,CACVvB,MAAOwB,WAETC,cAAe,CACbC,MAAO,CACLC,MAAO,OACPf,SAAU,IACVgB,WAAY,GAEdC,WAAY,CACV7B,MAAOwB,WAETM,UAAW,CACT9B,MAAOwB,UACPO,YAAaP,UACbQ,KAAMR,YAGVS,SAAU,CACRN,MAAO,SAETO,IAAK,CACHC,WAAY,UACZnC,MAAOoC,QACPjB,QAAS,EACTkB,aAAc,EACdpB,OAAQ,EACRqB,SAAU,IAEZC,YAAa,CACXJ,WAAY,WAEdK,UAAW,CACTL,WAAY,WAEdM,QAAS,CACPC,WAAY,IAGhB,OACE,kBAAC,IAAD,CAAkBC,SAAUC,GAC1B,6BACE,yBAAKlB,MAAOjB,EAAOC,gBACjB,kBAAC,IAAD,CAAOgB,MAAOjB,EAAOS,OACnB,8BACE,kBAAC,IAAD,CACE2B,SAAS,SACTC,kBAAkB,SAClBC,WAAW,IAEb,kBAAC,IAAD,CACEF,SAAS,WACTC,kBAAkB,WAClBC,WAAW,EACXC,KAAK,aAGP,6BACE,kBAAC,IAAD,CACEC,MAAM,cACNvB,MAAOjB,EAAOgB,cAAcC,MAC5BG,WAAYpB,EAAOgB,cAAcI,WACjCC,UAAWrB,EAAOgB,cAAcK,YAIhC,kBAAC,IAAD,CACEmB,MAAM,QACNC,SAAS,EACTxB,MAAOjB,EAAOwB,cAOxB,yBAAKP,MAAOjB,EAAOY,YACjB,kBAAC,IAAD,CACE4B,MAAM,WACNE,KAAK,IACLzB,MAAOjB,EAAOc,WACd6B,KAAM,kBAAC,IAAD,QAGR,kBAAC,IAAD,CACEH,MAAM,mBACNE,KAAK,IACLzB,MAAOjB,EAAOc,WACd6B,KAAM,kBAAC,IAAD,SAIV,yBAAK1B,MAAOjB,EAAOY,iBChGdgC,MAzBf,WACE,OACE,kBAAC,IAAMC,SAAP,KACA,yBAAKC,UAAU,OACb,2BACE,iDAGJ,6BACE,2BACE,4DAEF,kBAAC,EAAD,OAEF,6BAZA,IAYM,6BAZN,IAYY,6BAZZ,IAYkB,6BAZlB,IAYwB,6BAZxB,IAY8B,6BAZ9B,IAYoC,6BAZpC,IAY0C,6BAZ1C,IAYgD,6BAZhD,IAYsD,6BAZtD,IAY4D,6BAZ5D,IAYkE,6BAZlE,IAYwE,6BAZxE,IAY8E,6BAZ9E,IAYoF,6BACpF,6BACE,2BACE,sEAEF,kBAAC,EAAD,SCXcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e78c2fbb.chunk.js","sourcesContent":["import getMuiTheme from \"material-ui/styles/getMuiTheme\";\nimport { blue600, grey900 } from \"material-ui/styles/colors\";\n\nconst themeDefault = getMuiTheme({\n  palette: {},\n  appBar: {\n    height: 57,\n    color: blue600,\n  },\n  drawer: {\n    width: 230,\n    color: grey900,\n  },\n  raisedButton: {\n    primaryColor: blue600,\n  },\n});\n\nexport default themeDefault;\n","import React from \"react\";\nimport MuiThemeProvider from \"material-ui/styles/MuiThemeProvider\";\nimport Paper from \"material-ui/Paper\";\nimport RaisedButton from \"material-ui/RaisedButton\";\nimport FlatButton from \"material-ui/FlatButton\";\nimport Checkbox from \"material-ui/Checkbox\";\nimport { grey500, white } from \"material-ui/styles/colors\";\nimport PersonAdd from \"material-ui/svg-icons/social/person-add\";\nimport Help from \"material-ui/svg-icons/action/help\";\nimport TextField from \"material-ui/TextField\";\nimport { Link } from \"react-router\";\nimport ThemeDefault from \"../theme_default\";\n\nconst BasicMaterialUILoginPage = (params) => {\n  const styles = {\n    loginContainer: {\n      minWidth: 320,\n      maxWidth: 400,\n      height: \"auto\",\n      position: \"absolute\",\n      top: \"20%\",\n      left: 0,\n      right: 0,\n      margin: \"auto\",\n    },\n    paper: {\n      padding: 20,\n      overflow: \"auto\",\n    },\n    buttonsDiv: {\n      textAlign: \"center\",\n      padding: 10,\n    },\n    flatButton: {\n      color: grey500,\n    },\n    checkRemember: {\n      style: {\n        float: \"left\",\n        maxWidth: 180,\n        paddingTop: 5,\n      },\n      labelStyle: {\n        color: grey500,\n      },\n      iconStyle: {\n        color: grey500,\n        borderColor: grey500,\n        fill: grey500,\n      },\n    },\n    loginBtn: {\n      float: \"right\",\n    },\n    btn: {\n      background: \"#4f81e9\",\n      color: white,\n      padding: 7,\n      borderRadius: 2,\n      margin: 2,\n      fontSize: 13,\n    },\n    btnFacebook: {\n      background: \"#4f81e9\",\n    },\n    btnGoogle: {\n      background: \"#e14441\",\n    },\n    btnSpan: {\n      marginLeft: 5,\n    },\n  };\n  return (\n    <MuiThemeProvider muiTheme={ThemeDefault}>\n      <div>\n        <div style={styles.loginContainer}>\n          <Paper style={styles.paper}>\n            <form>\n              <TextField\n                hintText=\"E-mail\"\n                floatingLabelText=\"E-mail\"\n                fullWidth={true}\n              />\n              <TextField\n                hintText=\"Password\"\n                floatingLabelText=\"Password\"\n                fullWidth={true}\n                type=\"password\"\n              />\n\n              <div>\n                <Checkbox\n                  label=\"Remember me\"\n                  style={styles.checkRemember.style}\n                  labelStyle={styles.checkRemember.labelStyle}\n                  iconStyle={styles.checkRemember.iconStyle}\n                />\n\n                {/* <Link to=\"/\"> */}\n                  <RaisedButton\n                    label=\"Login\"\n                    primary={true}\n                    style={styles.loginBtn}\n                  />\n                {/* </Link> */}\n              </div>\n            </form>\n          </Paper>\n\n          <div style={styles.buttonsDiv}>\n            <FlatButton\n              label=\"Register\"\n              href=\"/\"\n              style={styles.flatButton}\n              icon={<PersonAdd />}\n            />\n\n            <FlatButton\n              label=\"Forgot Password?\"\n              href=\"/\"\n              style={styles.flatButton}\n              icon={<Help />}\n            />\n          </div>\n\n          <div style={styles.buttonsDiv}>\n            {/* <Link to=\"/\" style={{ ...styles.btn, ...styles.btnFacebook }}>\n              <i className=\"fa fa-facebook fa-lg\" />\n              <span style={styles.btnSpan}>Log in with Facebook</span>\n            </Link>\n            <Link to=\"/\" style={{ ...styles.btn, ...styles.btnGoogle }}>\n              <i className=\"fa fa-google-plus fa-lg\" />\n              <span style={styles.btnSpan}>Log in with Google</span>\n            </Link> */}\n          </div>\n        </div>\n      </div>\n    </MuiThemeProvider>\n  );\n};\n\nexport default BasicMaterialUILoginPage;\n","import React, {Fragment} from \"react\";\nimport \"./App.css\";\nimport BasicMaterialUILoginPage from \"./nirman-react-login-building-blocks/basic-material-ui-login-page\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n    <div className=\"App\">\n      <p>\n        <h1> Login Samples </h1>\n      </p>\n    </div>\n    <div>\n      <p>\n        <h3> BasicMaterialUILoginPage: </h3> \n      </p>\n      <BasicMaterialUILoginPage/>\n    </div>\n    <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/> <br/>\n    <div>\n      <p>\n        <h3> MobileFriendlySocialMediaLoginPage: </h3> \n      </p>\n      <BasicMaterialUILoginPage/>\n    </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}